// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	response "github.com/rxznik/golearn/weather-cli/internal/response"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// GeoClient is an autogenerated mock type for the GeoClient type
type GeoClient struct {
	mock.Mock
}

// GetGeoData provides a mock function with given fields: logger, city
func (_m *GeoClient) GetGeoData(logger *zap.Logger, city string) (*response.Response, error) {
	ret := _m.Called(logger, city)

	if len(ret) == 0 {
		panic("no return value specified for GetGeoData")
	}

	var r0 *response.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*zap.Logger, string) (*response.Response, error)); ok {
		return rf(logger, city)
	}
	if rf, ok := ret.Get(0).(func(*zap.Logger, string) *response.Response); ok {
		r0 = rf(logger, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*zap.Logger, string) error); ok {
		r1 = rf(logger, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGeoClient creates a new instance of GeoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoClient {
	mock := &GeoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
