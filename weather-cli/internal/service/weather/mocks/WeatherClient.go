// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	response "github.com/rxznik/golearn/weather-cli/internal/response"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// WeatherClient is an autogenerated mock type for the WeatherClient type
type WeatherClient struct {
	mock.Mock
}

// GetWeatherData provides a mock function with given fields: logger, lat, lon
func (_m *WeatherClient) GetWeatherData(logger *zap.Logger, lat float64, lon float64) (*response.WeatherResponse, error) {
	ret := _m.Called(logger, lat, lon)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherData")
	}

	var r0 *response.WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*zap.Logger, float64, float64) (*response.WeatherResponse, error)); ok {
		return rf(logger, lat, lon)
	}
	if rf, ok := ret.Get(0).(func(*zap.Logger, float64, float64) *response.WeatherResponse); ok {
		r0 = rf(logger, lat, lon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*zap.Logger, float64, float64) error); ok {
		r1 = rf(logger, lat, lon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherClient creates a new instance of WeatherClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherClient {
	mock := &WeatherClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
